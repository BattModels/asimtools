@article{rosen_quacc_nodate,
	title = {quacc – {The} {Quantum} {Accelerator}},
	url = {https://zenodo.org/records/8317316},
	doi = {10.5281/zenodo.8317316},
	abstract = {Summary Added Added support for the Redun workflow engine. Added a simple CLI for (un)setting YAML config parameters. Changed Internal refactoring of the Vasp calculator. Removed Removed the demonstration Jobflow EMT slab recipe. What's Changed Bump pymatgen from 2023.8.10 to 2023.9.2 by @dependabot in https://github.com/Quantum-Accelerators/quacc/pull/855 Simplify tracking of atoms.info due to new pmg release by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/856 Remove redundant Path() calls when using .resolve() by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/859 Add type-checking support by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/860 Address some mypy errors by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/861 Refactor Vasp calculator by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/862 format code with black, prettier and isort by @deepsource-autofix in https://github.com/Quantum-Accelerators/quacc/pull/863 Stricter check on decorator\_kwargs by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/864 Add redun support by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/866 Streamline jobflow instructions by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/867 Replaced os.path.exists() and os.path.join() by @OmAximani0 in https://github.com/Quantum-Accelerators/quacc/pull/858 format code with black, prettier and isort by @deepsource-autofix in https://github.com/Quantum-Accelerators/quacc/pull/871 Add some useful CLI options by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/813 Full Changelog: https://github.com/Quantum-Accelerators/quacc/compare/v0.2.4...v0.2.5},
	language = {en},
	urldate = {2023-10-23},
	author = {Rosen, Andrew},
	file = {Snapshot:/Users/mphuthi/Zotero/storage/YX6YEV8H/8317316.html:text/html},
}

@article{gjerding_atomic_2021,
	title = {Atomic {Simulation} {Recipes}: {A} {Python} framework and library for automated workflows},
	volume = {199},
	issn = {0927-0256},
	shorttitle = {Atomic {Simulation} {Recipes}},
	url = {https://www.sciencedirect.com/science/article/pii/S0927025621004584},
	doi = {10.1016/j.commatsci.2021.110731},
	abstract = {The Atomic Simulation Recipes (ASR) is an open source Python framework for working with atomistic materials simulations in an efficient and sustainable way that is ideally suited for high-throughput projects. Central to ASR is the concept of a Recipe: a high-level Python script that performs a well defined simulation task robustly and accurately while keeping track of the data provenance. The ASR leverages the functionality of the Atomic Simulation Environment (ASE) to interface with external simulation codes and attain a high abstraction level. We provide a library of Recipes for common simulation tasks employing density functional theory and many-body perturbation schemes. These Recipes utilize the GPAW electronic structure code, but may be adapted to other simulation codes with an ASE interface. Being independent objects with automatic data provenance control, Recipes can be freely combined through Python scripting giving maximal freedom for users to build advanced workflows. ASR also implements a command line interface that can be used to run Recipes and inspect results. The ASR Migration module helps users maintain their data while the Database and App modules makes it possible to create local databases and present them as customized web pages.},
	urldate = {2023-10-23},
	journal = {Computational Materials Science},
	author = {Gjerding, Morten and Skovhus, Thorbjørn and Rasmussen, Asbjørn and Bertoldo, Fabian and Larsen, Ask Hjorth and Mortensen, Jens Jørgen and Thygesen, Kristian Sommer},
	month = nov,
	year = {2021},
	keywords = {Density functional theory, Data provenance, Database, High-throughput, Materials computation, Python, Workflow},
	pages = {110731},
	file = {ScienceDirect Full Text PDF:/Users/mphuthi/Zotero/storage/DP8W9KJ9/Gjerding et al. - 2021 - Atomic Simulation Recipes A Python framework and .pdf:application/pdf;ScienceDirect Snapshot:/Users/mphuthi/Zotero/storage/H3VT7PVX/S0927025621004584.html:text/html},
}

@article{huber_aiida_2020,
	title = {{AiiDA} 1.0, a scalable computational infrastructure for automated reproducible workflows and data provenance},
	volume = {7},
	copyright = {2020 The Author(s)},
	issn = {2052-4463},
	url = {https://www.nature.com/articles/s41597-020-00638-4},
	doi = {10.1038/s41597-020-00638-4},
	abstract = {The ever-growing availability of computing power and the sustained development of advanced computational methods have contributed much to recent scientific progress. These developments present new challenges driven by the sheer amount of calculations and data to manage. Next-generation exascale supercomputers will harden these challenges, such that automated and scalable solutions become crucial. In recent years, we have been developing AiiDA (aiida.net), a robust open-source high-throughput infrastructure addressing the challenges arising from the needs of automated workflow management and data provenance recording. Here, we introduce developments and capabilities required to reach sustained performance, with AiiDA supporting throughputs of tens of thousands processes/hour, while automatically preserving and storing the full data provenance in a relational database making it queryable and traversable, thus enabling high-performance data analytics. AiiDA’s workflow language provides advanced automation, error handling features and a flexible plugin model to allow interfacing with external simulation software. The associated plugin registry enables seamless sharing of extensions, empowering a vibrant user community dedicated to making simulations more robust, user-friendly and reproducible.},
	language = {en},
	number = {1},
	urldate = {2023-10-23},
	journal = {Scientific Data},
	author = {Huber, Sebastiaan P. and Zoupanos, Spyros and Uhrin, Martin and Talirz, Leopold and Kahle, Leonid and Häuselmann, Rico and Gresch, Dominik and Müller, Tiziano and Yakutovich, Aliaksandr V. and Andersen, Casper W. and Ramirez, Francisco F. and Adorf, Carl S. and Gargiulo, Fernando and Kumbhar, Snehal and Passaro, Elsa and Johnston, Conrad and Merkys, Andrius and Cepellotti, Andrea and Mounet, Nicolas and Marzari, Nicola and Kozinsky, Boris and Pizzi, Giovanni},
	month = sep,
	year = {2020},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Computational methods, Research management},
	pages = {300},
	file = {Full Text PDF:/Users/mphuthi/Zotero/storage/7AZT4FNZ/Huber et al. - 2020 - AiiDA 1.0, a scalable computational infrastructure.pdf:application/pdf},
}

@article{thompson_lammps_2022,
	title = {{LAMMPS} - a flexible simulation tool for particle-based materials modeling at the atomic, meso, and continuum scales},
	volume = {271},
	doi = {10.1016/j.cpc.2021.108171},
	journal = {Comp. Phys. Comm.},
	author = {Thompson, A. P. and Aktulga, H. M. and Berger, R. and Bolintineanu, D. S. and Brown, W. M. and Crozier, P. S. and Veld, P. J. in 't and Kohlmeyer, A. and Moore, S. G. and Nguyen, T. D. and Shan, R. and Stevens, M. J. and Tranchida, J. and Trott, C. and Plimpton, S. J.},
	year = {2022},
	pages = {108171},
}

@article{walsh_open_2024,
	title = {Open computational materials science},
	volume = {23},
	copyright = {2024 Springer Nature Limited},
	issn = {1476-4660},
	url = {https://www.nature.com/articles/s41563-023-01699-7},
	doi = {10.1038/s41563-023-01699-7},
	abstract = {The materials modelling community is emerging as a champion for reproducible and reusable science. Aron Walsh discusses how FAIR databases, collaborative codes and transparent workflows are advancing this movement.},
	language = {en},
	number = {1},
	urldate = {2024-01-11},
	journal = {Nature Materials},
	author = {Walsh, Aron},
	month = jan,
	year = {2024},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Research data, Theory and computation},
	pages = {16--17},
	file = {Full Text PDF:/Users/mphuthi/Zotero/storage/QZMZ8CZC/Walsh - 2024 - Open computational materials science.pdf:application/pdf},
}

@article{jain_fireworks_2015,
	title = {{FireWorks}: a dynamic workflow system designed for high-throughput applications},
	volume = {27},
	issn = {1532-0634},
	url = {http://dx.doi.org/10.1002/cpe.3505},
	doi = {10.1002/cpe.3505},
	number = {17},
	journal = {Concurrency and Computation: Practice and Experience},
	author = {Jain, Anubhav and Ong, Shyue Ping and Chen, Wei and Medasani, Bharat and Qu, Xiaohui and Kocher, Michael and Brafman, Miriam and Petretto, Guido and Rignanese, Gian-Marco and Hautier, Geoffroy and Gunter, Daniel and Persson, Kristin A.},
	year = {2015},
	keywords = {fault-tolerant computing, high-throughput computing, scientific workflows},
	pages = {5037--5059},
}

@article{ong_python_2013,
	title = {Python {Materials} {Genomics} (pymatgen): {A} robust, open-source python library for materials analysis},
	volume = {68},
	issn = {0927-0256},
	shorttitle = {Python {Materials} {Genomics} (pymatgen)},
	url = {https://www.sciencedirect.com/science/article/pii/S0927025612006295},
	doi = {10.1016/j.commatsci.2012.10.028},
	abstract = {We present the Python Materials Genomics (pymatgen) library, a robust, open-source Python library for materials analysis. A key enabler in high-throughput computational materials science efforts is a robust set of software tools to perform initial setup for the calculations (e.g., generation of structures and necessary input files) and post-calculation analysis to derive useful material properties from raw calculated data. The pymatgen library aims to meet these needs by (1) defining core Python objects for materials data representation, (2) providing a well-tested set of structure and thermodynamic analyses relevant to many applications, and (3) establishing an open platform for researchers to collaboratively develop sophisticated analyses of materials data obtained both from first principles calculations and experiments. The pymatgen library also provides convenient tools to obtain useful materials data via the Materials Project’s REpresentational State Transfer (REST) Application Programming Interface (API). As an example, using pymatgen’s interface to the Materials Project’s RESTful API and phasediagram package, we demonstrate how the phase and electrochemical stability of a recently synthesized material, Li4SnS4, can be analyzed using a minimum of computing resources. We find that Li4SnS4 is a stable phase in the Li–Sn–S phase diagram (consistent with the fact that it can be synthesized), but the narrow range of lithium chemical potentials for which it is predicted to be stable would suggest that it is not intrinsically stable against typical electrodes used in lithium-ion batteries.},
	urldate = {2024-05-17},
	journal = {Computational Materials Science},
	author = {Ong, Shyue Ping and Richards, William Davidson and Jain, Anubhav and Hautier, Geoffroy and Kocher, Michael and Cholia, Shreyas and Gunter, Dan and Chevrier, Vincent L. and Persson, Kristin A. and Ceder, Gerbrand},
	month = feb,
	year = {2013},
	keywords = {Materials, Thermodynamics, High-throughput, Design, Project},
	pages = {314--319},
	file = {Full Text:/Users/mphuthi/Zotero/storage/EMBYEHLN/Ong et al. - 2013 - Python Materials Genomics (pymatgen) A robust, op.pdf:application/pdf;ScienceDirect Snapshot:/Users/mphuthi/Zotero/storage/X6PEC2HE/S0927025612006295.html:text/html},
}

@article{larsen_atomic_2017,
	title = {The atomic simulation environment—a {Python} library for working with atoms},
	volume = {29},
	issn = {0953-8984},
	url = {https://dx.doi.org/10.1088/1361-648X/aa680e},
	doi = {10.1088/1361-648X/aa680e},
	abstract = {The atomic simulation environment (ASE) is a software package written in the Python programming language with the aim of setting up, steering, and analyzing atomistic simulations. In ASE, tasks are fully scripted in Python. The powerful syntax of Python combined with the NumPy array library make it possible to perform very complex simulation tasks. For example, a sequence of calculations may be performed with the use of a simple ‘for-loop’ construction. Calculations of energy, forces, stresses and other quantities are performed through interfaces to many external electronic structure codes or force fields using a uniform interface. On top of this calculator interface, ASE provides modules for performing many standard simulation tasks such as structure optimization, molecular dynamics, handling of constraints and performing nudged elastic band calculations.},
	language = {en},
	number = {27},
	urldate = {2024-05-17},
	journal = {Journal of Physics: Condensed Matter},
	author = {Larsen, Ask Hjorth and Mortensen, Jens Jørgen and Blomqvist, Jakob and Castelli, Ivano E. and Christensen, Rune and Dułak, Marcin and Friis, Jesper and Groves, Michael N. and Hammer, Bjørk and Hargus, Cory and Hermes, Eric D. and Jennings, Paul C. and Jensen, Peter Bjerre and Kermode, James and Kitchin, John R. and Kolsbjerg, Esben Leonhard and Kubal, Joseph and Kaasbjerg, Kristen and Lysgaard, Steen and Maronsson, Jón Bergmann and Maxson, Tristan and Olsen, Thomas and Pastewka, Lars and Peterson, Andrew and Rostgaard, Carsten and Schiøtz, Jakob and Schütt, Ole and Strange, Mikkel and Thygesen, Kristian S. and Vegge, Tejs and Vilhelmsen, Lasse and Walter, Michael and Zeng, Zhenhua and Jacobsen, Karsten W.},
	month = jun,
	year = {2017},
	note = {Publisher: IOP Publishing},
	pages = {273002},
	file = {IOP Full Text PDF:/Users/mphuthi/Zotero/storage/TYVWH643/Larsen et al. - 2017 - The atomic simulation environment—a Python library.pdf:application/pdf},
}


@article{rosen_quacc_nodate,
	title = {quacc – {The} {Quantum} {Accelerator}},
	url = {https://zenodo.org/records/8317316},
	doi = {10.5281/zenodo.8317316},
	abstract = {Summary Added Added support for the Redun workflow engine. Added a simple CLI for (un)setting YAML config parameters. Changed Internal refactoring of the Vasp calculator. Removed Removed the demonstration Jobflow EMT slab recipe. What's Changed Bump pymatgen from 2023.8.10 to 2023.9.2 by @dependabot in https://github.com/Quantum-Accelerators/quacc/pull/855 Simplify tracking of atoms.info due to new pmg release by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/856 Remove redundant Path() calls when using .resolve() by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/859 Add type-checking support by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/860 Address some mypy errors by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/861 Refactor Vasp calculator by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/862 format code with black, prettier and isort by @deepsource-autofix in https://github.com/Quantum-Accelerators/quacc/pull/863 Stricter check on decorator\_kwargs by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/864 Add redun support by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/866 Streamline jobflow instructions by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/867 Replaced os.path.exists() and os.path.join() by @OmAximani0 in https://github.com/Quantum-Accelerators/quacc/pull/858 format code with black, prettier and isort by @deepsource-autofix in https://github.com/Quantum-Accelerators/quacc/pull/871 Add some useful CLI options by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/813 Full Changelog: https://github.com/Quantum-Accelerators/quacc/compare/v0.2.4...v0.2.5},
	language = {en},
	urldate = {2023-10-23},
	author = {Rosen, Andrew},
	file = {Snapshot:/Users/mphuthi/Zotero/storage/YX6YEV8H/8317316.html:text/html},
}

@article{gjerding_atomic_2021,
	title = {Atomic {Simulation} {Recipes}: {A} {Python} framework and library for automated workflows},
	volume = {199},
	issn = {0927-0256},
	shorttitle = {Atomic {Simulation} {Recipes}},
	url = {https://www.sciencedirect.com/science/article/pii/S0927025621004584},
	doi = {10.1016/j.commatsci.2021.110731},
	abstract = {The Atomic Simulation Recipes (ASR) is an open source Python framework for working with atomistic materials simulations in an efficient and sustainable way that is ideally suited for high-throughput projects. Central to ASR is the concept of a Recipe: a high-level Python script that performs a well defined simulation task robustly and accurately while keeping track of the data provenance. The ASR leverages the functionality of the Atomic Simulation Environment (ASE) to interface with external simulation codes and attain a high abstraction level. We provide a library of Recipes for common simulation tasks employing density functional theory and many-body perturbation schemes. These Recipes utilize the GPAW electronic structure code, but may be adapted to other simulation codes with an ASE interface. Being independent objects with automatic data provenance control, Recipes can be freely combined through Python scripting giving maximal freedom for users to build advanced workflows. ASR also implements a command line interface that can be used to run Recipes and inspect results. The ASR Migration module helps users maintain their data while the Database and App modules makes it possible to create local databases and present them as customized web pages.},
	urldate = {2023-10-23},
	journal = {Computational Materials Science},
	author = {Gjerding, Morten and Skovhus, Thorbjørn and Rasmussen, Asbjørn and Bertoldo, Fabian and Larsen, Ask Hjorth and Mortensen, Jens Jørgen and Thygesen, Kristian Sommer},
	month = nov,
	year = {2021},
	keywords = {Density functional theory, Data provenance, Database, High-throughput, Materials computation, Python, Workflow},
	pages = {110731},
	file = {ScienceDirect Full Text PDF:/Users/mphuthi/Zotero/storage/DP8W9KJ9/Gjerding et al. - 2021 - Atomic Simulation Recipes A Python framework and .pdf:application/pdf;ScienceDirect Snapshot:/Users/mphuthi/Zotero/storage/H3VT7PVX/S0927025621004584.html:text/html},
}

@article{huber_aiida_2020,
	title = {{AiiDA} 1.0, a scalable computational infrastructure for automated reproducible workflows and data provenance},
	volume = {7},
	copyright = {2020 The Author(s)},
	issn = {2052-4463},
	url = {https://www.nature.com/articles/s41597-020-00638-4},
	doi = {10.1038/s41597-020-00638-4},
	abstract = {The ever-growing availability of computing power and the sustained development of advanced computational methods have contributed much to recent scientific progress. These developments present new challenges driven by the sheer amount of calculations and data to manage. Next-generation exascale supercomputers will harden these challenges, such that automated and scalable solutions become crucial. In recent years, we have been developing AiiDA (aiida.net), a robust open-source high-throughput infrastructure addressing the challenges arising from the needs of automated workflow management and data provenance recording. Here, we introduce developments and capabilities required to reach sustained performance, with AiiDA supporting throughputs of tens of thousands processes/hour, while automatically preserving and storing the full data provenance in a relational database making it queryable and traversable, thus enabling high-performance data analytics. AiiDA’s workflow language provides advanced automation, error handling features and a flexible plugin model to allow interfacing with external simulation software. The associated plugin registry enables seamless sharing of extensions, empowering a vibrant user community dedicated to making simulations more robust, user-friendly and reproducible.},
	language = {en},
	number = {1},
	urldate = {2023-10-23},
	journal = {Scientific Data},
	author = {Huber, Sebastiaan P. and Zoupanos, Spyros and Uhrin, Martin and Talirz, Leopold and Kahle, Leonid and Häuselmann, Rico and Gresch, Dominik and Müller, Tiziano and Yakutovich, Aliaksandr V. and Andersen, Casper W. and Ramirez, Francisco F. and Adorf, Carl S. and Gargiulo, Fernando and Kumbhar, Snehal and Passaro, Elsa and Johnston, Conrad and Merkys, Andrius and Cepellotti, Andrea and Mounet, Nicolas and Marzari, Nicola and Kozinsky, Boris and Pizzi, Giovanni},
	month = sep,
	year = {2020},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Computational methods, Research management},
	pages = {300},
	file = {Full Text PDF:/Users/mphuthi/Zotero/storage/7AZT4FNZ/Huber et al. - 2020 - AiiDA 1.0, a scalable computational infrastructure.pdf:application/pdf},
}

@article{phuthi_accurate_2024,
	title = {Accurate {Surface} and {Finite}-{Temperature} {Bulk} {Properties} of {Lithium} {Metal} at {Large} {Scales} {Using} {Machine} {Learning} {Interaction} {Potentials}},
	volume = {9},
	url = {https://doi.org/10.1021/acsomega.3c10014},
	doi = {10.1021/acsomega.3c10014},
	abstract = {The properties of lithium metal are key parameters in the design of lithium-ion and lithium-metal batteries. They are difficult to probe experimentally due to the high reactivity and low melting point of lithium as well as the microscopic scales at which lithium exists in batteries where it is found to have enhanced strength, with implications for dendrite suppression strategies. Computationally, there is a lack of empirical potentials that are consistently quantitatively accurate across all properties, and ab initio calculations are too costly. In this work, we train a machine learning interaction potential on density functional theory (DFT) data to state-of-the-art accuracy in reproducing experimental and ab initio results across a wide range of simulations at large length and time scales. We accurately predict thermodynamic properties, phonon spectra, temperature dependence of elastic constants, and various surface properties inaccessible using DFT. We establish that there exists a weak Bell–Evans–Polanyi relation correlating the self-adsorption energy and the minimum surface diffusion barrier for high Miller index facets.},
	number = {9},
	urldate = {2024-03-15},
	journal = {ACS Omega},
	author = {Phuthi, Mgcini Keith and Yao, Archie Mingze and Batzner, Simon and Musaelian, Albert and Guan, Pinwen and Kozinsky, Boris and Cubuk, Ekin Dogus and Viswanathan, Venkatasubramanian},
	month = mar,
	year = {2024},
	note = {Publisher: American Chemical Society},
	pages = {10904--10912},
	file = {Full Text PDF:/Users/mphuthi/Zotero/storage/G7CUSWAX/Phuthi et al. - 2024 - Accurate Surface and Finite-Temperature Bulk Prope.pdf:application/pdf},
}

@misc{phuthi_vibrational_2024,
	title = {Vibrational {Entropy} and {Free} {Energy} of {Solid} {Lithium} using {Covariance} of {Atomic} {Displacements} {Enabled} by {Machine} {Learning}},
	url = {http://arxiv.org/abs/2406.15491},
	abstract = {Vibrational properties of solids are key to determining stability, response and functionality. However, they are challenging to computationally predict at Ab-Initio accuracy, even for elemental systems. Ab-Initio methods for modeling atomic interactions are limited in the system sizes and simulation times that can be achieved. Due to these limitations, Machine Learning Interatomic Potentials (MLIPs) are gaining popularity and success as a faster, more scalable approach for modeling atomic interactions, potentially at Ab-Initio accuracy. Even with faster potentials, methodologies for predicting entropy, free energy and vibrational properties vary in accuracy, cost and difficulty to implement. Using the Covariance of Atomic Displacements (CAD) to predict entropy, free energy and finite-temperature phonon dispersions is a promising approach but thorough benchmarking has been hampered by the cost of Ab-Initio methods for sampling. In this work, we use a MLIP and the CAD to characterize the convergence of the predicted properties and determine optimal sampling strategies. We focus on solid lithium at zero pressure, showing that the MLIP-CAD approach reproduces experimental entropy, phonon dispersions and the martensitic transition while also comparing to more established methods.},
	urldate = {2024-06-25},
	publisher = {arXiv},
	author = {Phuthi, Mgcini Keith and Huang, Yang and Widom, Michael and Viswanathan, Venkatasubramanian},
	month = jun,
	year = {2024},
	note = {arXiv:2406.15491 [cond-mat]},
	keywords = {Condensed Matter - Materials Science, Condensed Matter - Statistical Mechanics},
	file = {arXiv Fulltext PDF:/Users/mphuthi/Zotero/storage/BSEDTV9Y/Phuthi et al. - 2024 - Vibrational Entropy and Free Energy of Solid Lithi.pdf:application/pdf;arXiv.org Snapshot:/Users/mphuthi/Zotero/storage/A63L5FN8/2406.html:text/html},
}
