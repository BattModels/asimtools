
@article{rosen_quacc_nodate,
	title = {quacc – {The} {Quantum} {Accelerator}},
	url = {https://zenodo.org/records/8317316},
	doi = {10.5281/zenodo.8317316},
	abstract = {Summary Added Added support for the Redun workflow engine. Added a simple CLI for (un)setting YAML config parameters. Changed Internal refactoring of the Vasp calculator. Removed Removed the demonstration Jobflow EMT slab recipe. What's Changed Bump pymatgen from 2023.8.10 to 2023.9.2 by @dependabot in https://github.com/Quantum-Accelerators/quacc/pull/855 Simplify tracking of atoms.info due to new pmg release by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/856 Remove redundant Path() calls when using .resolve() by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/859 Add type-checking support by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/860 Address some mypy errors by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/861 Refactor Vasp calculator by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/862 format code with black, prettier and isort by @deepsource-autofix in https://github.com/Quantum-Accelerators/quacc/pull/863 Stricter check on decorator\_kwargs by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/864 Add redun support by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/866 Streamline jobflow instructions by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/867 Replaced os.path.exists() and os.path.join() by @OmAximani0 in https://github.com/Quantum-Accelerators/quacc/pull/858 format code with black, prettier and isort by @deepsource-autofix in https://github.com/Quantum-Accelerators/quacc/pull/871 Add some useful CLI options by @arosen93 in https://github.com/Quantum-Accelerators/quacc/pull/813 Full Changelog: https://github.com/Quantum-Accelerators/quacc/compare/v0.2.4...v0.2.5},
	language = {en},
	urldate = {2023-10-23},
	author = {Rosen, Andrew},
	file = {Snapshot:/Users/mphuthi/Zotero/storage/YX6YEV8H/8317316.html:text/html},
}

@article{gjerding_atomic_2021,
	title = {Atomic {Simulation} {Recipes}: {A} {Python} framework and library for automated workflows},
	volume = {199},
	issn = {0927-0256},
	shorttitle = {Atomic {Simulation} {Recipes}},
	url = {https://www.sciencedirect.com/science/article/pii/S0927025621004584},
	doi = {10.1016/j.commatsci.2021.110731},
	abstract = {The Atomic Simulation Recipes (ASR) is an open source Python framework for working with atomistic materials simulations in an efficient and sustainable way that is ideally suited for high-throughput projects. Central to ASR is the concept of a Recipe: a high-level Python script that performs a well defined simulation task robustly and accurately while keeping track of the data provenance. The ASR leverages the functionality of the Atomic Simulation Environment (ASE) to interface with external simulation codes and attain a high abstraction level. We provide a library of Recipes for common simulation tasks employing density functional theory and many-body perturbation schemes. These Recipes utilize the GPAW electronic structure code, but may be adapted to other simulation codes with an ASE interface. Being independent objects with automatic data provenance control, Recipes can be freely combined through Python scripting giving maximal freedom for users to build advanced workflows. ASR also implements a command line interface that can be used to run Recipes and inspect results. The ASR Migration module helps users maintain their data while the Database and App modules makes it possible to create local databases and present them as customized web pages.},
	urldate = {2023-10-23},
	journal = {Computational Materials Science},
	author = {Gjerding, Morten and Skovhus, Thorbjørn and Rasmussen, Asbjørn and Bertoldo, Fabian and Larsen, Ask Hjorth and Mortensen, Jens Jørgen and Thygesen, Kristian Sommer},
	month = nov,
	year = {2021},
	keywords = {Density functional theory, Data provenance, Database, High-throughput, Materials computation, Python, Workflow},
	pages = {110731},
	file = {ScienceDirect Full Text PDF:/Users/mphuthi/Zotero/storage/DP8W9KJ9/Gjerding et al. - 2021 - Atomic Simulation Recipes A Python framework and .pdf:application/pdf;ScienceDirect Snapshot:/Users/mphuthi/Zotero/storage/H3VT7PVX/S0927025621004584.html:text/html},
}

@misc{noauthor_dflow_2023,
	title = {{DFLOW}},
	copyright = {LGPL-3.0},
	url = {https://github.com/dptech-corp/dflow},
	urldate = {2023-10-23},
	publisher = {DP Technology},
	month = aug,
	year = {2023},
	note = {original-date: 2022-01-21T08:05:31Z},
}

@article{huber_aiida_2020,
	title = {{AiiDA} 1.0, a scalable computational infrastructure for automated reproducible workflows and data provenance},
	volume = {7},
	copyright = {2020 The Author(s)},
	issn = {2052-4463},
	url = {https://www.nature.com/articles/s41597-020-00638-4},
	doi = {10.1038/s41597-020-00638-4},
	abstract = {The ever-growing availability of computing power and the sustained development of advanced computational methods have contributed much to recent scientific progress. These developments present new challenges driven by the sheer amount of calculations and data to manage. Next-generation exascale supercomputers will harden these challenges, such that automated and scalable solutions become crucial. In recent years, we have been developing AiiDA (aiida.net), a robust open-source high-throughput infrastructure addressing the challenges arising from the needs of automated workflow management and data provenance recording. Here, we introduce developments and capabilities required to reach sustained performance, with AiiDA supporting throughputs of tens of thousands processes/hour, while automatically preserving and storing the full data provenance in a relational database making it queryable and traversable, thus enabling high-performance data analytics. AiiDA’s workflow language provides advanced automation, error handling features and a flexible plugin model to allow interfacing with external simulation software. The associated plugin registry enables seamless sharing of extensions, empowering a vibrant user community dedicated to making simulations more robust, user-friendly and reproducible.},
	language = {en},
	number = {1},
	urldate = {2023-10-23},
	journal = {Scientific Data},
	author = {Huber, Sebastiaan P. and Zoupanos, Spyros and Uhrin, Martin and Talirz, Leopold and Kahle, Leonid and Häuselmann, Rico and Gresch, Dominik and Müller, Tiziano and Yakutovich, Aliaksandr V. and Andersen, Casper W. and Ramirez, Francisco F. and Adorf, Carl S. and Gargiulo, Fernando and Kumbhar, Snehal and Passaro, Elsa and Johnston, Conrad and Merkys, Andrius and Cepellotti, Andrea and Mounet, Nicolas and Marzari, Nicola and Kozinsky, Boris and Pizzi, Giovanni},
	month = sep,
	year = {2020},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Computational methods, Research management},
	pages = {300},
	file = {Full Text PDF:/Users/mphuthi/Zotero/storage/7AZT4FNZ/Huber et al. - 2020 - AiiDA 1.0, a scalable computational infrastructure.pdf:application/pdf},
}

@article{devlin_stacking_1974,
	title = {Stacking fault energies of {Be}, {Mg}, {Al}, {Cu}, {Ag}, and {Au}},
	volume = {4},
	issn = {0305-4608},
	url = {https://dx.doi.org/10.1088/0305-4608/4/11/011},
	doi = {10.1088/0305-4608/4/11/011},
	abstract = {Expressions for the stacking fault energies of close packed metals are derived. The technique employs periodic boundary conditions on a crystal containing a large number of widely spaced faults. All necessary summations are performed in wavenumber space. Reasonable agreement is obtained with experiment for the metals Be, Mg, Al, Cu, Ag, and Au. Contrary to some earlier work, the electrostatic contribution to the fault energy is found to be quite significant. The noble metal calculations include an evaluation of the d state overlap energy term; and this is shown to be small in comparison to the other contributions.},
	language = {en},
	number = {11},
	urldate = {2023-11-17},
	journal = {Journal of Physics F: Metal Physics},
	author = {Devlin, J. F.},
	month = nov,
	year = {1974},
	pages = {1865},
	file = {IOP Full Text PDF:/Users/mphuthi/Zotero/storage/SY3C95PX/Devlin - 1974 - Stacking fault energies of Be, Mg, Al, Cu, Ag, and.pdf:application/pdf},
}

@misc{noauthor_defects_nodate,
	title = {Defects in {Crystals}},
	url = {https://dtrinkle.matse.illinois.edu/MatSE584/index.html},
	urldate = {2023-11-20},
	file = {Defects in Crystals:/Users/mphuthi/Zotero/storage/CSQ9JTN5/index.html:text/html},
}

@article{walsh_open_2024,
	title = {Open computational materials science},
	volume = {23},
	copyright = {2024 Springer Nature Limited},
	issn = {1476-4660},
	url = {https://www.nature.com/articles/s41563-023-01699-7},
	doi = {10.1038/s41563-023-01699-7},
	abstract = {The materials modelling community is emerging as a champion for reproducible and reusable science. Aron Walsh discusses how FAIR databases, collaborative codes and transparent workflows are advancing this movement.},
	language = {en},
	number = {1},
	urldate = {2024-01-11},
	journal = {Nature Materials},
	author = {Walsh, Aron},
	month = jan,
	year = {2024},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Research data, Theory and computation},
	pages = {16--17},
	file = {Full Text PDF:/Users/mphuthi/Zotero/storage/QZMZ8CZC/Walsh - 2024 - Open computational materials science.pdf:application/pdf},
}

@article{jain_fireworks_2015,
	title = {{FireWorks}: a dynamic workflow system designed for high-throughput applications},
	volume = {27},
	issn = {1532-0634},
	url = {http://dx.doi.org/10.1002/cpe.3505},
	doi = {10.1002/cpe.3505},
	number = {17},
	journal = {Concurrency and Computation: Practice and Experience},
	author = {Jain, Anubhav and Ong, Shyue Ping and Chen, Wei and Medasani, Bharat and Qu, Xiaohui and Kocher, Michael and Brafman, Miriam and Petretto, Guido and Rignanese, Gian-Marco and Hautier, Geoffroy and Gunter, Daniel and Persson, Kristin A.},
	year = {2015},
	keywords = {fault-tolerant computing, high-throughput computing, scientific workflows},
	pages = {5037--5059},
}
